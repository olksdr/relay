searchState.loadedDescShard("relay_system", 0, "Foundational system components for Relay’s services.\nThe address of a <code>Service</code>.\nMessage response resulting in an asynchronous <code>Request</code>.\nA channel that broadcasts values to attached senders.\nThe request when sending an asynchronous message to a …\nVariation of <code>AsyncResponse</code> that efficiently broadcasts …\nSends a message response from a service back to the …\nService to start and gracefully stop the system runtime.\nDeclares a message as part of an <code>Interface</code>.\nShut down gracefully within the configured timeout.\nShut down immediately without finishing pending work.\nA message interface for services.\nThe interface of messages this service implements.\nResponse behavior of an <code>Interface</code> message.\nMessage response for fire-and-forget messages with no …\nThe type returned from <code>Addr::send</code>.\nInbound channel for messages sent through an <code>Addr</code>.\nAn address to a <code>Service</code> implementing any interface that …\nThe request when sending an asynchronous message to a …\nThe behavior declaring the return value when sending this …\nAn error when sending a message to a service fails.\nSends a message response from a service back to the …\nSends responses from the service back to the waiting …\nAn asynchronous unit responding to messages.\nShutdown request message sent by the <code>Controller</code> to …\nNotifies a service about an upcoming shutdown.\nDetermines how to shut down the Relay system.\nAttaches a sender of another message to this channel to …\nCreates an unbounded channel for communicating with a …\nReturns the response channel for an interface message.\nCustom address used for testing.\nDummy address used for testing.\nWait for the shutdown and timeout to complete.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the message into the service interface.\nReturns the current shutdown state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a channel from this sender that can be shared with …\nReturns <code>true</code> if there are requests waiting for this …\nReturns wether the queue is currently empty.\nReturns the current queue size.\nReturns a unique name for this service implementation.\nReturns a unique name for this service implementation.\nCreates a standalone channel.\nWait for a shutdown.\nReturns a handle that can receive a given message …\nReceives the next value for this receiver.\nSends the response value and closes the <code>Request</code>.\nSends a message to the service and returns the response.\nSends a message to the service and returns the response.\nSends a value to all attached senders and closes the …\nImmediately resolve a ready value.\nManually initiates the shutdown process of the system.\nReturns a handle to receive shutdown notifications.\nSpawns a task to handle service messages.\nStarts the service in the current runtime and returns an …\nStarts the service in the current runtime and returns an …\nStarts a controller that monitors shutdown signals.\nStarts the service in the given runtime and returns an …\nStarts the service in the given runtime and returns an …\nThe timeout for this shutdown. <code>None</code> indicates an immediate …")